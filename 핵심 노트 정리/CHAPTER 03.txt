[CHAPTER 03 데이터 분석에 필요한 SQL]

3-1. 조회(SELECT)

(1) csv 파일 가져오기
: 데이터베이스명 우클릭 - 태스크 - 플랫 파일 가져오기 - 파일 선택 후 기본키, Null 여부 지정
(2) FROM : 테이블을 선택하는 명령어
(3) WHERE : 테이블을 특정 조건으로 필터하는 명령어
(4) GROUP BY : 특정 열들을 그룹으로 묶는 명령어
(5) COUNT : 특정 조건을 만족하는 열의 개수를 구하는 집계 함수
(6) HAVING : GROUP BY된 테이블을 특정 조건으로 필터하는 명령어
(7) ORDER BY : 조회된 행을 정렬하는 명령어
** SELECT COUNT(칼럼) FROM [테이블]
   WHERE 조건
   GROUP BY 칼럼
   HAVING 조건
   ORDER BY 칼럼 DESC
** WHERE절이 GROUP BY절보다 먼저 실행
** WHERE는 [FROM 테이블]로 만들어진 테이블의 행을 필터하며,
   HAVING은 [GROUP BY 열]로 만들어진 새로운 테이블의 행을 필터
** ASC는 오름차순 정렬, DESC는 내림차순 정렬
(8) 문법 순서 : SELECT - FROM - WHERE - GROUP BY - HAVING - ORDER BY
    실행 순서 : FROM - WHERE - GROUP BY - HAVING - SELECT - ORDER BY

3-2. 결합(JOIN)

(1) ERM(Entity-Relationship Modelling)
: 데이터를 구조화하여 데이터베이스에 저장하기 위한 개체-관계 모델링 기법
ex) 회원이 N번 주문할 수 있기 때문에, 회원 및 주문 테이블 관계는 1:N
     한 상품이 N번 주문될 수 있기 때문에, 주문 및 상품 테이블 관계는 N:1
(2) 1은 고유한 PRIMARY KEY이며, N은 PK와 연결되는 중복 데이터가 가능한 FOREIGN KEY
ex) 회원 테이블의 PK는 회원번호이며, 주문 테이블에서의 회원번호는 FK
     상품 테이블의 PK는 상품번호이며, 주문 테이블에서의 상품번호는 FK
(3) INNER JOIN : 공통된 요소들을 통해 결합하는 조인 방식
** SELECT * FROM [테이블1] INNER JOIN [테이블2] ON 테이블1.칼럼 = 테이블2.칼럼
** ON은 두 테이블 간 연결 조건을 지정하는 명령어 (대부분 PK 및 FK 지정)
(4) OUTER JOIN : 공통으로 매칭되지 않는 요소들도 결합하는 조인 방식
** LEFT, RIGHT, FULL JOIN이 있으며, 매칭되지 않는 데이터는 NULL 값으로 조회
(5) CROSS JOIN : 두 테이블의 행을 결합하는 명령어 (m X n개의 행 조회)
(6) SELF JOIN : 한 테이블의 행과 다른 행들을 결합하는 명령어 (m X m개의 행 조회)
** SELECT * FROM [테이블] A, [테이블] B WHERE A.조건

3-3. 서브 쿼리(Sub Query)

(1) 서브 쿼리 : 하나의 SQL 명령어(메인 쿼리)에 포함된 SELECT 명령어
(2) 주로 SELECT절, FROM절, WHERE절 뒤에 위치하여 사용
** SELECT절에 사용되는 서브 쿼리는 데이터의 양이 많을수록 실행 속도가 느려 거의 사용 X
(3) FROM절에 사용되는 서브 쿼리는 인라인 뷰 서브 쿼리라고 하며, 테이블처럼 사용
** 테이블처럼 사용되기 때문에 열 이름 및 테이블명 명시
** SELECT *
   FROM (
	SELECT 칼럼, SUM(칼럼) AS 열 이름
	FROM [테이블]
	GROUP BY 칼럼
             ) 테이블명
(4) WHERE절에 사용되는 서브 쿼리의 종류는 2가지로, 단일 행과 다중 행
** 단일 행 서브 쿼리의 결과는 단일 행이어야 하며, 비교 연산자 사용 ex) =
** 다중 행 서브 쿼리의 결과는 여러 행이어야 하며, SQL 연산자 사용 ex) IN

3-4. 마치며